{
	"_information": [
		"TO-DO: skill points pool, skill ranks controlled inputs, skill scores, this file's description",
		"hidden_inputs are values that can be set and modified freely by the system",
		"user_inputs are values that can be set directly by the user",
		"controlled_inputs are values that can be set by the user, but are limited and/or managed by the system in a way that may affect other inputs or scores"
	],
	"hidden_inputs": [
		{
			"name": "skill points pool",
			"value": 0
		},
		{
			"name": "alchemist class level",
			"value": 0
		},
		{
			"name": "antipaladin class level",
			"value": 0
		},
		{
			"name": "arcanist class level",
			"value": 0
		},
		{
			"name": "barbarian class level",
			"value": 0
		},
		{
			"name": "unchained barbarian class level",
			"value": 0
		},
		{
			"name": "bard class level",
			"value": 0
		},
		{
			"name": "bloodrager class level",
			"value": 0
		},
		{
			"name": "brawler class level",
			"value": 0
		},
		{
			"name": "cavalier class level",
			"value": 0
		},
		{
			"name": "cleric class level",
			"value": 0
		},
		{
			"name": "druid class level",
			"value": 0
		},
		{
			"name": "fighter class level",
			"value": 0
		},
		{
			"name": "gunslinger class level",
			"value": 0
		},
		{
			"name": "hunter class level",
			"value": 0
		},
		{
			"name": "inquisitor class level",
			"value": 0
		},
		{
			"name": "investigator class level",
			"value": 0
		},
		{
			"name": "kineticist class level",
			"value": 0
		},
		{
			"name": "magus class level",
			"value": 0
		},
		{
			"name": "medium class level",
			"value": 0
		},
		{
			"name": "mesmerist class level",
			"value": 0
		},
		{
			"name": "monk class level",
			"value": 0
		},
		{
			"name": "unchained monk class level",
			"value": 0
		},
		{
			"name": "ninja class level",
			"value": 0
		},
		{
			"name": "occultist class level",
			"value": 0
		},
		{
			"name": "oracle class level",
			"value": 0
		},
		{
			"name": "paladin class level",
			"value": 0
		},
		{
			"name": "psychic class level",
			"value": 0
		},
		{
			"name": "ranger class level",
			"value": 0
		},
		{
			"name": "rogue class level",
			"value": 0
		},
		{
			"name": "unchained rogue class level",
			"value": 0
		},
		{
			"name": "samuari class level",
			"value": 0
		},
		{
			"name": "shaman class level",
			"value": 0
		},
		{
			"name": "shifter class level",
			"value": 0
		},
		{
			"name": "skald class level",
			"value": 0
		},
		{
			"name": "slayer class level",
			"value": 0
		},
		{
			"name": "sorcerer class level",
			"value": 0
		},
		{
			"name": "spiritualist class level",
			"value": 0
		},
		{
			"name": "summoner class level",
			"value": 0
		},
		{
			"name": "unchained summoner class level",
			"value": 0
		},
		{
			"name": "swashbuckler class level",
			"value": 0
		},
		{
			"name": "vigilante class level",
			"value": 0
		},
		{
			"name": "warpriest class level",
			"value": 0
		},
		{
			"name": "witch class level",
			"value": 0
		},
		{
			"name": "wizard class level",
			"value": 0
		}
	],
	"user_inputs": {
		"INTEGER": [
			{
				"name": "base strength score",
				"value": 10
			},
			{
				"name": "base dexterity score",
				"value": 10
			},
			{
				"name": "base constitution score",
				"value": 10
			},
			{
				"name": "base intelligence score",
				"value": 10
			},
			{
				"name": "base wisdom score",
				"value": 10
			},
			{
				"name": "base charisma score",
				"value": 10
			}
		],
		"STRING": [
			{
				"name": "alignment",
				"value": "N",
				"keys": [
					"LG",
					"LN",
					"LE",
					"NG",
					"N",
					"NE",
					"CG",
					"CN",
					"CE",
					"Unaligned"
				]
			}
		]
	},
	"controlled_inputs": {
		"INTEGER": [
			{
				"test_value": "CURRENT RANKS",
				"test_name": "THIS SKILL",
				"can_increment": "(getInput(skill points pool) > 0) && (CURRENT RANKS < getScore(max skill ranks))",
				"do_increment": [
					"setInput(skill points pool,getInput(skill points pool) - 1)",
					"setInput(THIS SKILL, CURRENT RANKS + 1)"
				],
				"can_decrement": "CURRENT RANKS > 0",
				"do_decrement": [
					"setInput(skill points pool,getInput(skill points pool) + 1)",
					"setInput(THIS SKILL, CURRENT RANKS - 1)"
				],
				"controls": [
					"increment",
					"decrement"
				],
				"list": [
					{
						"name": "acrobatics ranks",
						"value": 0
					},
					{
						"name": "appraise ranks",
						"value": 0
					},
					{
						"name": "bluff ranks",
						"value": 0
					},
					{
						"name": "climb ranks",
						"value": 0
					},
					{
						"name": "craft alchemy ranks",
						"value": 0
					},
					{
						"name": "craft armor ranks",
						"value": 0
					},
					{
						"name": "craft baskets ranks",
						"value": 0
					},
					{
						"name": "craft books ranks",
						"value": 0
					},
					{
						"name": "craft bows ranks",
						"value": 0
					},
					{
						"name": "craft calligraphy ranks",
						"value": 0
					},
					{
						"name": "craft carpentry ranks",
						"value": 0
					},
					{
						"name": "craft cloth ranks",
						"value": 0
					},
					{
						"name": "craft clothing ranks",
						"value": 0
					},
					{
						"name": "craft glass ranks",
						"value": 0
					},
					{
						"name": "craft jewelry ranks",
						"value": 0
					},
					{
						"name": "craft leather ranks",
						"value": 0
					},
					{
						"name": "craft locks ranks",
						"value": 0
					},
					{
						"name": "craft paintings ranks",
						"value": 0
					},
					{
						"name": "craft pottery ranks",
						"value": 0
					},
					{
						"name": "craft sculptures ranks",
						"value": 0
					},
					{
						"name": "craft ships ranks",
						"value": 0
					},
					{
						"name": "craft shoes ranks",
						"value": 0
					},
					{
						"name": "craft stonemasonry ranks",
						"value": 0
					},
					{
						"name": "craft traps ranks",
						"value": 0
					},
					{
						"name": "craft weapons ranks",
						"value": 0
					},
					{
						"name": "diplomacy ranks",
						"value": 0
					},
					{
						"name": "disable device ranks",
						"value": 0
					},
					{
						"name": "disguise ranks",
						"value": 0
					},
					{
						"name": "escape artist ranks",
						"value": 0
					},
					{
						"name": "fly ranks",
						"value": 0
					},
					{
						"name": "handle animal ranks",
						"value": 0
					},
					{
						"name": "heal ranks",
						"value": 0
					},
					{
						"name": "intimidate ranks",
						"value": 0
					},
					{
						"name": "knowledge arcana ranks",
						"value": 0
					},
					{
						"name": "knowledge dungeoneering ranks",
						"value": 0
					},
					{
						"name": "knowledge engineering ranks",
						"value": 0
					},
					{
						"name": "knowledge geography ranks",
						"value": 0
					},
					{
						"name": "knowledge history ranks",
						"value": 0
					},
					{
						"name": "knowledge local ranks",
						"value": 0
					},
					{
						"name": "knowledge nature ranks",
						"value": 0
					},
					{
						"name": "knowledge nobility ranks",
						"value": 0
					},
					{
						"name": "knowledge planes ranks",
						"value": 0
					},
					{
						"name": "knowledge religion ranks",
						"value": 0
					},
					{
						"name": "linguistics ranks",
						"value": 0
					},
					{
						"name": "perception ranks",
						"value": 0
					},
					{
						"name": "perform act ranks",
						"value": 0
					},
					{
						"name": "perform comedy ranks",
						"value": 0
					},
					{
						"name": "perform dance ranks",
						"value": 0
					},
					{
						"name": "perform keyboard ranks",
						"value": 0
					},
					{
						"name": "perform oratory ranks",
						"value": 0
					},
					{
						"name": "perform percussion ranks",
						"value": 0
					},
					{
						"name": "perform sing ranks",
						"value": 0
					},
					{
						"name": "perform string ranks",
						"value": 0
					},
					{
						"name": "perform wind ranks",
						"value": 0
					},
					{
						"name": "profession ranks",
						"value": 0
					},
					{
						"name": "profession baker ranks",
						"value": 0
					},
					{
						"name": "profession barrister ranks",
						"value": 0
					},
					{
						"name": "profession brewer ranks",
						"value": 0
					},
					{
						"name": "profession butcher ranks",
						"value": 0
					},
					{
						"name": "profession clerk ranks",
						"value": 0
					},
					{
						"name": "profession cook ranks",
						"value": 0
					},
					{
						"name": "profession courtesan ranks",
						"value": 0
					},
					{
						"name": "profession driver ranks",
						"value": 0
					},
					{
						"name": "profession engineer ranks",
						"value": 0
					},
					{
						"name": "profession farmer ranks",
						"value": 0
					},
					{
						"name": "profession fisherman ranks",
						"value": 0
					},
					{
						"name": "profession gambler ranks",
						"value": 0
					},
					{
						"name": "profession gardener ranks",
						"value": 0
					},
					{
						"name": "profession herbalist ranks",
						"value": 0
					},
					{
						"name": "profession innkeeper ranks",
						"value": 0
					},
					{
						"name": "profession librarian ranks",
						"value": 0
					},
					{
						"name": "profession merchant ranks",
						"value": 0
					},
					{
						"name": "profession midwife ranks",
						"value": 0
					},
					{
						"name": "profession miller ranks",
						"value": 0
					},
					{
						"name": "profession miner ranks",
						"value": 0
					},
					{
						"name": "profession porter ranks",
						"value": 0
					},
					{
						"name": "profession sailor ranks",
						"value": 0
					},
					{
						"name": "profession scribe ranks",
						"value": 0
					},
					{
						"name": "profession shepherd ranks",
						"value": 0
					},
					{
						"name": "profession soldier ranks",
						"value": 0
					},
					{
						"name": "profession stable master ranks",
						"value": 0
					},
					{
						"name": "profession tanner ranks",
						"value": 0
					},
					{
						"name": "profession trapper ranks",
						"value": 0
					},
					{
						"name": "profession woodcutter ranks",
						"value": 0
					},
					{
						"name": "ride ranks",
						"value": 0
					},
					{
						"name": "sense motive ranks",
						"value": 0
					},
					{
						"name": "sleight of hand ranks",
						"value": 0
					},
					{
						"name": "spellcraft ranks",
						"value": 0
					},
					{
						"name": "stealth ranks",
						"value": 0
					},
					{
						"name": "survival ranks",
						"value": 0
					},
					{
						"name": "swim ranks",
						"value": 0
					},
					{
						"name": "use magic device ranks",
						"value": 0
					}
				]
			}
		]
	},
	"modules": [
		{
			"file": "generator.js",
			"functions": [
				"calculateBonusesByType"
			]
		}
	],
	"automations": [
		{
			"name": "Random Ability Scores",
			"methods": [
				{
					"name": "Standard (4d6, drop lowest)",
					"steps": [
						"setInput(basic strength score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))",
						"setInput(basic dexterity score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))",
						"setInput(basic constitution score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))",
						"setInput(basic intelligence score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))",
						"setInput(basic wisdom score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))",
						"setInput(basic charisma score,save(A,randomInt(1,6))+save(B,randomInt(1,6))+save(C,randomInt(1,6))+save(D,randomInt(1,6))-min(load(A),load(B),load(C),load(D))"
					]
				},
				{
					"name": "Classic (3d6)",
					"steps": [
						"setInput(basic strength score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic dexterity score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic constitution score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic intelligence score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic wisdom score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic charisma score,randomInt(1,6)+randomInt(1,6)+randomInt(1,6))"
					]
				},
				{
					"name": "Heroic (2d6 + 6)",
					"steps": [
						"setInput(basic strength score,6+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic dexterity score,6+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic constitution score,6+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic intelligence score,6+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic wisdom score,6+randomInt(1,6)+randomInt(1,6))",
						"setInput(basic charisma score,6+randomInt(1,6)+randomInt(1,6))"
					]
				}
			]
		}
	],
	"scores": [
		{
			"name": "character level",
			"formula": "getInput(alchemist class level) + getInput(antipaladin class level) + getInput(arcanist class level) + getInput(barbarian class level) + getInput(unchained barbarian_unchained class level) + getInput(bard class level) + getInput(bloodrager class level) + getInput(brawler class level) + getInput(cavalier class level) + getInput(cleric class level) + getInput(druid class level) + getInput(fighter class level) + getInput(gunslinger class level) + getInput(hunter class level) + getInput(inquisitor class level) + getInput(investigator class level) + getInput(kineticist class level) + getInput(magus class level) + getInput(medium class level) + getInput(mesmerist class level) + getInput(monk class level) + getInput(unchained monk_unchained class level) + getInput(ninja class level) + getInput(occultist class level) + getInput(oracle class level) + getInput(paladin class level) + getInput(psychic class level) + getInput(ranger class level) + getInput(rogue class level) + getInput(unchained rogue_unchained class level) + getInput(samuari class level) + getInput(shaman class level) + getInput(shifter class level) + getInput(skald class level) + getInput(slayer class level) + getInput(sorcerer class level) + getInput(spiritualist class level) + getInput(summoner class level) + getInput(unchained summoner_unchained class level) + getInput(swashbuckler class level) + getInput(vigilante class level) + getInput(warpriest class level) + getInput(witch class level) + getInput(wizard class level)"
		},
		{
			"name": "base attack bonus",
			"formula": "sum(getScores(BAB bonus))"
		},
		{
			"name": "fortitude save",
			"formula": "sum(getScores(fortitude save bonus))"
		},
		{
			"name": "will save",
			"formula": "sum(getScores(will save bonus))"
		},
		{
			"name": "reflex save",
			"formula": "sum(getScores(reflex save bonus))"
		},
		{
			"name": "initiative",
			"formula": "sum(getScore(DEX mod),calculateBonusesByType(getObjects(initiative bonus)))"
		},
		{
			"name": "strength score",
			"formula": "getInput(base strength score)+calculateBonusesByType(getObjectsScores(strength bonus))"
		},
		{
			"name": "STR mod",
			"formula": "floor(getScore(strength score) / 2 - 5)"
		},
		{
			"name": "dexterity score",
			"formula": "getInput(base dexterity score)+calculateBonusesByType(getObjectsScores(dexterity bonus))"
		},
		{
			"name": "DEX mod",
			"formula": "floor(getScore(dexterity score) / 2 - 5)"
		},
		{
			"name": "constitution score",
			"formula": "getInput(base constitution score)+calculateBonusesByType(getObjectsScores(constitution bonus))"
		},
		{
			"name": "CON mod",
			"formula": "floor(getScore(constitution score) / 2 - 5)"
		},
		{
			"name": "intelligence score",
			"formula": "getInput(base intelligence score)+calculateBonusesByType(getObjectsScores(intelligence bonus))"
		},
		{
			"name": "INT mod",
			"formula": "floor(getScore(intelligence score) / 2 - 5)"
		},
		{
			"name": "wisdom score",
			"formula": "getInput(base wisdom score)+calculateBonusesByType(getObjectsScores(wisdom bonus))"
		},
		{
			"name": "WIS mod",
			"formula": "floor(getScore(wisdom score) / 2 - 5)"
		},
		{
			"name": "charisma score",
			"formula": "getInput(base charisma score)+calculateBonusesByType(getObjectsScores(charisma bonus))"
		},
		{
			"name": "CHA mod",
			"formula": "floor(getScore(charisma score) / 2 - 5)"
		},
		{
			"name": "max skill ranks",
			"formula": "getScore(character level)"
		},
		{
			"name": "acrobatics total",
			"formula": "getScore(DEX mod) + getInput(acrobatics ranks) + if((getInput(acrobatics ranks) > 0) && hasTag(class-skill:acrobatics), 3, 0) + calculateBonusesByType(getObjectsScores(acrobatics bonus))"
		},
		{
			"name": "appraise total",
			"formula": "getScore(INT mod) + getInput(appraise ranks) + if((getInput(appraise ranks) > 0) && hasTag(class-skill:appraise), 3, 0) + calculateBonusesByType(getObjectsScores(appraise bonus))"
		},
		{
			"name": "bluff total",
			"formula": "getScore(CHA mod) + getInput(bluff ranks) + if((getInput(bluff ranks) > 0) && hasTag(class-skill:bluff), 3, 0) + calculateBonusesByType(getObjectsScores(bluff bonus))"
		},
		{
			"name": "climb total",
			"formula": "getScore(STR mod) + getInput(climb ranks) + if((getInput(climb ranks) > 0) && hasTag(class-skill:climb), 3, 0) + calculateBonusesByType(getObjectsScores(climb bonus))"
		},
		{
			"name": "craft alchemy total",
			"formula": "getScore(INT mod) + getInput(craft alchemy ranks) + if((getInput(craft alchemy ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-alchemy), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft alchemy bonus))"
		},
		{
			"name": "craft armor total",
			"formula": "getScore(INT mod) + getInput(craft armor ranks) + if((getInput(craft armor ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-armor), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft armor bonus))"
		},
		{
			"name": "craft baskets total",
			"formula": "getScore(INT mod) + getInput(craft baskets ranks) + if((getInput(craft baskets ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-baskets), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft baskets bonus))"
		},
		{
			"name": "craft books total",
			"formula": "getScore(INT mod) + getInput(craft books ranks) + if((getInput(craft books ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-books), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft books bonus))"
		},
		{
			"name": "craft bows total",
			"formula": "getScore(INT mod) + getInput(craft bows ranks) + if((getInput(craft bows ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-bows), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft bows bonus))"
		},
		{
			"name": "craft calligraphy total",
			"formula": "getScore(INT mod) + getInput(craft calligraphy ranks) + if((getInput(craft calligraphy ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-calligraphy), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft calligraphy bonus))"
		},
		{
			"name": "craft carpentry total",
			"formula": "getScore(INT mod) + getInput(craft carpentry ranks) + if((getInput(craft carpentry ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-carpentry), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft carpentry bonus))"
		},
		{
			"name": "craft cloth total",
			"formula": "getScore(INT mod) + getInput(craft cloth ranks) + if((getInput(craft cloth ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-cloth), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft cloth bonus))"
		},
		{
			"name": "craft clothing total",
			"formula": "getScore(INT mod) + getInput(craft clothing ranks) + if((getInput(craft clothing ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-clothing), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft clothing bonus))"
		},
		{
			"name": "craft glass total",
			"formula": "getScore(INT mod) + getInput(craft glass ranks) + if((getInput(craft glass ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-glass), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft glass bonus))"
		},
		{
			"name": "craft jewelry total",
			"formula": "getScore(INT mod) + getInput(craft jewelry ranks) + if((getInput(craft jewelry ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-jewelry), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft jewelry bonus))"
		},
		{
			"name": "craft leather total",
			"formula": "getScore(INT mod) + getInput(craft leather ranks) + if((getInput(craft leather ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-leather), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft leather bonus))"
		},
		{
			"name": "craft locks total",
			"formula": "getScore(INT mod) + getInput(craft locks ranks) + if((getInput(craft locks ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-locks), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft locks bonus))"
		},
		{
			"name": "craft paintings total",
			"formula": "getScore(INT mod) + getInput(craft paintings ranks) + if((getInput(craft paintings ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-paintings), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft paintings bonus))"
		},
		{
			"name": "craft pottery total",
			"formula": "getScore(INT mod) + getInput(craft pottery ranks) + if((getInput(craft pottery ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-pottery), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft pottery bonus))"
		},
		{
			"name": "craft sculptures total",
			"formula": "getScore(INT mod) + getInput(craft sculptures ranks) + if((getInput(craft sculptures ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-sculptures), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft sculptures bonus))"
		},
		{
			"name": "craft ships total",
			"formula": "getScore(INT mod) + getInput(craft ships ranks) + if((getInput(craft ships ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-ships), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft ships bonus))"
		},
		{
			"name": "craft shoes total",
			"formula": "getScore(INT mod) + getInput(craft shoes ranks) + if((getInput(craft shoes ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-shoes), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft shoes bonus))"
		},
		{
			"name": "craft stonemasonry total",
			"formula": "getScore(INT mod) + getInput(craft stonemasonry ranks) + if((getInput(craft stonemasonry ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-stonemasonry), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft stonemasonry bonus))"
		},
		{
			"name": "craft traps total",
			"formula": "getScore(INT mod) + getInput(craft traps ranks) + if((getInput(craft traps ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-traps), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft traps bonus))"
		},
		{
			"name": "craft weapons total",
			"formula": "getScore(INT mod) + getInput(craft weapons ranks) + if((getInput(craft weapons ranks) > 0) && hasTag(class-skill:craft,class-skill:craft-weapons), 3, 0) + calculateBonusesByType(getObjectsScores(craft bonus)) + calculateBonusesByType(getObjectsScores(craft weapons bonus))"
		},
		{
			"name": "diplomacy total",
			"formula": "getScore(CHA mod) + getInput(diplomacy ranks) + if((getInput(diplomacy ranks) > 0) && hasTag(class-skill:diplomacy), 3, 0) + calculateBonusesByType(getObjectsScores(diplomacy bonus))"
		},
		{
			"name": "disable device total",
			"formula": "getScore(DEX mod) + getInput(disable device ranks) + if((getInput(disable device ranks) > 0) && hasTag(class-skill:disable-device), 3, 0) + calculateBonusesByType(getObjectsScores(disable device bonus))"
		},
		{
			"name": "disguise total",
			"formula": "getScore(CHA mod) + getInput(disguise ranks) + if((getInput(disguise ranks) > 0) && hasTag(class-skill:disguise), 3, 0) + calculateBonusesByType(getObjectsScores(disguise bonus))"
		},
		{
			"name": "escape artist total",
			"formula": "getScore(DEX mod) + getInput(escape artist ranks) + if((getInput(escape artist ranks) > 0) && hasTag(class-skill:escape-artist), 3, 0) + calculateBonusesByType(getObjectsScores(escape artist bonus))"
		},
		{
			"name": "fly total",
			"formula": "getScore(DEX mod) + getInput(fly ranks) + if((getInput(fly ranks) > 0) && hasTag(class-skill:fly), 3, 0) + calculateBonusesByType(getObjectsScores(fly bonus))"
		},
		{
			"name": "handle animal total",
			"formula": "getScore(WIS mod) + getInput(handle animal ranks) + if((getInput(handle animal ranks) > 0) && hasTag(class-skill:handle-animal), 3, 0) + calculateBonusesByType(getObjectsScores(handle animal bonus))"
		},
		{
			"name": "heal total",
			"formula": "getScore(WIS mod) + getInput(heal ranks) + if((getInput(heal ranks) > 0) && hasTag(class-skill:heal), 3, 0) + calculateBonusesByType(getObjectsScores(heal bonus))"
		},
		{
			"name": "intimidate total",
			"formula": "getScore(CHA mod) + getInput(intimidate ranks) + if((getInput(intimidate ranks) > 0) && hasTag(class-skill:intimidate), 3, 0) + calculateBonusesByType(getObjectsScores(intimidate bonus))"
		},
		{
			"name": "knowledge arcana total",
			"formula": "getScore(INT mod) + getInput(knowledge arcana ranks) + if((getInput(knowledge arcana ranks) > 0) && hasTag(class-skill:knowledge-arcana), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge arcana bonus))"
		},
		{
			"name": "knowledge dungeoneering total",
			"formula": "getScore(INT mod) + getInput(knowledge dungeoneering ranks) + if((getInput(knowledge dungeoneering ranks) > 0) && hasTag(class-skill:knowledge-dungeoneering), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge dungeoneering bonus))"
		},
		{
			"name": "knowledge engineering total",
			"formula": "getScore(INT mod) + getInput(knowledge engineering ranks) + if((getInput(knowledge engineering ranks) > 0) && hasTag(class-skill:knowledge-engineering), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge engineering bonus))"
		},
		{
			"name": "knowledge geography total",
			"formula": "getScore(INT mod) + getInput(knowledge geography ranks) + if((getInput(knowledge geography ranks) > 0) && hasTag(class-skill:knowledge-geography), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge geography bonus))"
		},
		{
			"name": "knowledge history total",
			"formula": "getScore(INT mod) + getInput(knowledge history ranks) + if((getInput(knowledge history ranks) > 0) && hasTag(class-skill:knowledge-history), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge history bonus))"
		},
		{
			"name": "knowledge local total",
			"formula": "getScore(INT mod) + getInput(knowledge local ranks) + if((getInput(knowledge local ranks) > 0) && hasTag(class-skill:knowledge-local), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge local bonus))"
		},
		{
			"name": "knowledge nature total",
			"formula": "getScore(INT mod) + getInput(knowledge nature ranks) + if((getInput(knowledge nature ranks) > 0) && hasTag(class-skill:knowledge-nature), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge nature bonus))"
		},
		{
			"name": "knowledge nobility total",
			"formula": "getScore(INT mod) + getInput(knowledge nobility ranks) + if((getInput(knowledge nobility ranks) > 0) && hasTag(class-skill:knowledge-nobility), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge nobility bonus))"
		},
		{
			"name": "knowledge planes total",
			"formula": "getScore(INT mod) + getInput(knowledge planes ranks) + if((getInput(knowledge planes ranks) > 0) && hasTag(class-skill:knowledge-planes), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge planes bonus))"
		},
		{
			"name": "knowledge religion total",
			"formula": "getScore(INT mod) + getInput(knowledge religion ranks) + if((getInput(knowledge religion ranks) > 0) && hasTag(class-skill:knowledge-religion), 3, 0) + calculateBonusesByType(getObjectsScores(knowledge religion bonus))"
		},
		{
			"name": "linguistics total",
			"formula": "getScore(INT mod) + getInput(linguistics ranks) + if((getInput(linguistics ranks) > 0) && hasTag(class-skill:linguistics), 3, 0) + calculateBonusesByType(getObjectsScores(linguistics bonus))"
		},
		{
			"name": "perception total",
			"formula": "getScore(WIS mod) + getInput(perception ranks) + if((getInput(perception ranks) > 0) && hasTag(class-skill:perception), 3, 0) + calculateBonusesByType(getObjectsScores(perception bonus))"
		},
		{
			"name": "perform act total",
			"formula": "getScore(CHA mod) + getInput(perform act ranks) + if((getInput(perform act ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-act), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform act bonus))"
		},
		{
			"name": "perform comedy total",
			"formula": "getScore(CHA mod) + getInput(perform comedy ranks) + if((getInput(perform comedy ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-comedy), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform comedy bonus))"
		},
		{
			"name": "perform dance total",
			"formula": "getScore(CHA mod) + getInput(perform dance ranks) + if((getInput(perform dance ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-dance), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform dance bonus))"
		},
		{
			"name": "perform keyboard total",
			"formula": "getScore(CHA mod) + getInput(perform keyboard ranks) + if((getInput(perform keyboard ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-keyboard), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform keyboard bonus))"
		},
		{
			"name": "perform oratory total",
			"formula": "getScore(CHA mod) + getInput(perform oratory ranks) + if((getInput(perform oratory ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-oratory), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform oratory bonus))"
		},
		{
			"name": "perform percussion total",
			"formula": "getScore(CHA mod) + getInput(perform percussion ranks) + if((getInput(perform percussion ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-percussion), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform percussion bonus))"
		},
		{
			"name": "perform sing total",
			"formula": "getScore(CHA mod) + getInput(perform sing ranks) + if((getInput(perform sing ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-sing), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform sing bonus))"
		},
		{
			"name": "perform string total",
			"formula": "getScore(CHA mod) + getInput(perform string ranks) + if((getInput(perform string ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-string), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform string bonus))"
		},
		{
			"name": "perform wind total",
			"formula": "getScore(CHA mod) + getInput(perform wind ranks) + if((getInput(perform wind ranks) > 0) && hasTag(class-skill:perform,class-skill:perform-wind), 3, 0) + calculateBonusesByType(getObjectsScores(perform bonus)) + calculateBonusesByType(getObjectsScores(perform wind bonus))"
		},
		{
			"name": "profession architect total",
			"formula": "getScore(WIS mod) + getInput(profession architect ranks) + if((getInput(profession architect ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-architect), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession architect bonus))"
		},
		{
			"name": "profession baker total",
			"formula": "getScore(WIS mod) + getInput(profession baker ranks) + if((getInput(profession baker ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-baker), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession baker bonus))"
		},
		{
			"name": "profession barrister total",
			"formula": "getScore(WIS mod) + getInput(profession barrister ranks) + if((getInput(profession barrister ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-barrister), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession barrister bonus))"
		},
		{
			"name": "profession brewer total",
			"formula": "getScore(WIS mod) + getInput(profession brewer ranks) + if((getInput(profession brewer ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-brewer), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession brewer bonus))"
		},
		{
			"name": "profession butcher total",
			"formula": "getScore(WIS mod) + getInput(profession butcher ranks) + if((getInput(profession butcher ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-butcher), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession butcher bonus))"
		},
		{
			"name": "profession clerk total",
			"formula": "getScore(WIS mod) + getInput(profession clerk ranks) + if((getInput(profession clerk ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-clerk), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession clerk bonus))"
		},
		{
			"name": "profession cook total",
			"formula": "getScore(WIS mod) + getInput(profession cook ranks) + if((getInput(profession cook ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-cook), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession cook bonus))"
		},
		{
			"name": "profession courtesan total",
			"formula": "getScore(WIS mod) + getInput(profession courtesan ranks) + if((getInput(profession courtesan ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-courtesan), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession courtesan bonus))"
		},
		{
			"name": "profession driver total",
			"formula": "getScore(WIS mod) + getInput(profession driver ranks) + if((getInput(profession driver ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-driver), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession driver bonus))"
		},
		{
			"name": "profession engineer total",
			"formula": "getScore(WIS mod) + getInput(profession engineer ranks) + if((getInput(profession engineer ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-engineer), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession engineer bonus))"
		},
		{
			"name": "profession farmer total",
			"formula": "getScore(WIS mod) + getInput(profession farmer ranks) + if((getInput(profession farmer ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-farmer), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession farmer bonus))"
		},
		{
			"name": "profession fisherman total",
			"formula": "getScore(WIS mod) + getInput(profession fisherman ranks) + if((getInput(profession fisherman ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-fisherman), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession fisherman bonus))"
		},
		{
			"name": "profession gambler total",
			"formula": "getScore(WIS mod) + getInput(profession gambler ranks) + if((getInput(profession gambler ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-gambler), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession gambler bonus))"
		},
		{
			"name": "profession gardener total",
			"formula": "getScore(WIS mod) + getInput(profession gardener ranks) + if((getInput(profession gardener ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-gardener), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession gardener bonus))"
		},
		{
			"name": "profession herbalist total",
			"formula": "getScore(WIS mod) + getInput(profession herbalist ranks) + if((getInput(profession herbalist ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-herbalist), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession herbalist bonus))"
		},
		{
			"name": "profession innkeeper total",
			"formula": "getScore(WIS mod) + getInput(profession innkeeper ranks) + if((getInput(profession innkeeper ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-innkeeper), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession innkeeper bonus))"
		},
		{
			"name": "profession librarian total",
			"formula": "getScore(WIS mod) + getInput(profession librarian ranks) + if((getInput(profession librarian ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-librarian), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession librarian bonus))"
		},
		{
			"name": "profession merchant total",
			"formula": "getScore(WIS mod) + getInput(profession merchant ranks) + if((getInput(profession merchant ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-merchant), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession merchant bonus))"
		},
		{
			"name": "profession midwife total",
			"formula": "getScore(WIS mod) + getInput(profession midwife ranks) + if((getInput(profession midwife ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-midwife), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession midwife bonus))"
		},
		{
			"name": "profession miller total",
			"formula": "getScore(WIS mod) + getInput(profession miller ranks) + if((getInput(profession miller ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-miller), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession miller bonus))"
		},
		{
			"name": "profession miner total",
			"formula": "getScore(WIS mod) + getInput(profession miner ranks) + if((getInput(profession miner ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-miner), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession miner bonus))"
		},
		{
			"name": "profession porter total",
			"formula": "getScore(WIS mod) + getInput(profession porter ranks) + if((getInput(profession porter ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-porter), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession porter bonus))"
		},
		{
			"name": "profession sailor total",
			"formula": "getScore(WIS mod) + getInput(profession sailor ranks) + if((getInput(profession sailor ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-sailor), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession sailor bonus))"
		},
		{
			"name": "profession scribe total",
			"formula": "getScore(WIS mod) + getInput(profession scribe ranks) + if((getInput(profession scribe ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-scribe), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession scribe bonus))"
		},
		{
			"name": "profession shepherd total",
			"formula": "getScore(WIS mod) + getInput(profession shepherd ranks) + if((getInput(profession shepherd ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-shepherd), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession shepherd bonus))"
		},
		{
			"name": "profession soldier total",
			"formula": "getScore(WIS mod) + getInput(profession soldier ranks) + if((getInput(profession soldier ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-soldier), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession soldier bonus))"
		},
		{
			"name": "profession stable master total",
			"formula": "getScore(WIS mod) + getInput(profession stable master ranks) + if((getInput(profession stable master ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-stable-master), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession stable master bonus))"
		},
		{
			"name": "profession tanner total",
			"formula": "getScore(WIS mod) + getInput(profession tanner ranks) + if((getInput(profession tanner ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-tanner), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession tanner bonus))"
		},
		{
			"name": "profession trapper total",
			"formula": "getScore(WIS mod) + getInput(profession trapper ranks) + if((getInput(profession trapper ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-trapper), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession trapper bonus))"
		},
		{
			"name": "profession woodcutter total",
			"formula": "getScore(WIS mod) + getInput(profession woodcutter ranks) + if((getInput(profession woodcutter ranks) > 0) && hasTag(class-skill:profession,class-skill:profession-woodcutter), 3, 0) + calculateBonusesByType(getObjectsScores(profession bonus)) + calculateBonusesByType(getObjectsScores(profession woodcutter bonus))"
		},
		{
			"name": "ride total",
			"formula": "getScore(DEX mod) + getInput(ride ranks) + if((getInput(ride ranks) > 0) && hasTag(class-skill:ride), 3, 0) + calculateBonusesByType(getObjectsScores(ride bonus))"
		},
		{
			"name": "sense motive total",
			"formula": "getScore(WIS mod) + getInput(sense motive ranks) + if((getInput(sense motive ranks) > 0) && hasTag(class-skill:sense-motive), 3, 0) + calculateBonusesByType(getObjectsScores(sense motive bonus))"
		},
		{
			"name": "sleight of hand total",
			"formula": "getScore(DEX mod) + getInput(sleight of hand ranks) + if((getInput(sleight of hand ranks) > 0) && hasTag(class-skill:sleight-of-hand), 3, 0) + calculateBonusesByType(getObjectsScores(sleight of hand bonus))"
		},
		{
			"name": "spellcraft total",
			"formula": "getScore(INT mod) + getInput(spellcraft ranks) + if((getInput(spellcraft ranks) > 0) && hasTag(class-skill:spellcraft), 3, 0) + calculateBonusesByType(getObjectsScores(spellcraft bonus))"
		},
		{
			"name": "stealth total",
			"formula": "getScore(DEX mod) + getInput(stealth ranks) + if((getInput(stealth ranks) > 0) && hasTag(class-skill:stealth), 3, 0) + calculateBonusesByType(getObjectsScores(stealth bonus))"
		},
		{
			"name": "survival total",
			"formula": "getScore(WIS mod) + getInput(survival ranks) + if((getInput(survival ranks) > 0) && hasTag(class-skill:survival), 3, 0) + calculateBonusesByType(getObjectsScores(survival bonus))"
		},
		{
			"name": "swim total",
			"formula": "getScore(STR mod) + getInput(swim ranks) + if((getInput(swim ranks) > 0) && hasTag(class-skill:swim), 3, 0) + calculateBonusesByType(getObjectsScores(swim bonus))"
		},
		{
			"name": "use magic device total",
			"formula": "getScore(CHA mod) + getInput(use magic device ranks) + if((getInput(use magic device ranks) > 0) && hasTag(class-skill:use-magic-device), 3, 0) + calculateBonusesByType(getObjectsScores(use magic device bonus))"
		}
	]
}
